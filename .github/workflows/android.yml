name: Android CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'android/**'
      - '.github/workflows/android.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'android/**'
      - '.github/workflows/android.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '34'
  ANDROID_MIN_API_LEVEL: '23'
  GRADLE_VERSION: '8.0'

jobs:
  build-and-test:
    name: Build and Test Android
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        api-level: [23, 29, 34]
        target: [default, google_apis]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache Android Build Tools
      uses: actions/cache@v3
      with:
        path: |
          ~/.android/build-cache
        key: ${{ runner.os }}-android-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-android-build-

    - name: Make Gradle Wrapper Executable
      run: |
        cd android
        chmod +x gradlew

    - name: Lint Kotlin Code
      run: |
        cd android
        ./gradlew ktlintCheck

    - name: Run Detekt Static Analysis
      run: |
        cd android
        ./gradlew detekt

    - name: Build Debug APK
      run: |
        cd android
        ./gradlew assembleDebug

    - name: Run Unit Tests
      run: |
        cd android
        ./gradlew testDebugUnitTest

    - name: Generate Test Coverage Report
      run: |
        cd android
        ./gradlew jacocoTestReport

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: android/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: android
        fail_ci_if_error: true

    - name: Run Android Lint
      run: |
        cd android
        ./gradlew lintDebug

    - name: Upload Lint Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: android-lint-results
        path: android/app/build/reports/lint-results-debug.html

    - name: Build Release APK
      if: github.event_name != 'pull_request'
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd android
        
        # Create keystore file from secret
        echo ${{ secrets.KEYSTORE_FILE }} | base64 --decode > app/keystore.jks
        
        # Build release APK
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=keystore.jks \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD

    - name: Build AAB (Android App Bundle)
      if: github.event_name != 'pull_request'
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd android
        ./gradlew bundleRelease \
          -Pandroid.injected.signing.store.file=keystore.jks \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD

    - name: Upload Build Artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: android-release-artifacts
        path: |
          android/app/build/outputs/apk/release/*.apk
          android/app/build/outputs/bundle/release/*.aab

  instrumented-tests:
    name: Instrumented Tests
    runs-on: macos-latest
    needs: build-and-test
    
    strategy:
      matrix:
        api-level: [23, 29, 34]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}

    - name: Enable KVM (for Linux runners)
      if: runner.os == 'Linux'
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: AVD Cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}

    - name: Create AVD and Generate Snapshot for Caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: google_apis
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Run Instrumented Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: google_apis
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          cd android
          ./gradlew connectedDebugAndroidTest

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: android-test-results-api-${{ matrix.api-level }}
        path: android/app/build/reports/androidTests/connected/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Run Security Audit
      run: |
        cd android
        echo "🔍 Scanning for potential security issues..."
        
        # Check for hardcoded secrets
        if grep -r "API_KEY\|SECRET\|PASSWORD" --include="*.kt" --include="*.java" --include="*.xml" app/src/; then
          echo "⚠️ Potential hardcoded secrets found"
          exit 1
        fi
        
        # Check for debug flags in release builds
        if grep -r "debuggable.*true" app/src/main/; then
          echo "⚠️ Debug flag found in main source"
          exit 1
        fi

    - name: Run OWASP Dependency Check
      run: |
        cd android
        ./gradlew dependencyCheckAnalyze

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: android-security-report
        path: android/app/build/reports/dependency-check-report.html

    - name: Check for Vulnerable Dependencies
      run: |
        cd android
        # Check if any HIGH or CRITICAL vulnerabilities were found
        if grep -i "HIGH\|CRITICAL" android/app/build/reports/dependency-check-report.html; then
          echo "❌ High or Critical vulnerabilities found!"
          exit 1
        fi

  deploy-play-store:
    name: Deploy to Play Store
    runs-on: ubuntu-latest
    needs: [build-and-test, instrumented-tests, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://play.google.com/console
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-release-artifacts
        path: android/app/build/outputs/

    - name: Setup Google Play Service Account
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      run: |
        echo "$GOOGLE_PLAY_SERVICE_ACCOUNT" | base64 --decode > service-account.json

    - name: Deploy to Internal Testing
      if: github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/develop'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: service-account.json
        packageName: com.example.coronawarnapp
        releaseFiles: android/app/build/outputs/bundle/release/*.aab
        track: internal
        status: completed
        inAppUpdatePriority: 2

    - name: Deploy to Production
      if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: service-account.json
        packageName: com.example.coronawarnapp
        releaseFiles: android/app/build/outputs/bundle/release/*.aab
        track: production
        status: draft
        inAppUpdatePriority: 3
        whatsNewDirectory: android/release-notes/
        mappingFile: android/app/build/outputs/mapping/release/mapping.txt

    - name: Clean up Service Account
      if: always()
      run: rm -f service-account.json

    - name: Notify Deployment
      if: success()
      run: |
        echo "✅ Android app successfully deployed to Play Store"
        echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
        echo "Track: ${{ github.event.inputs.environment == 'production' && 'production' || 'internal' }}"
        echo "Build: ${{ github.sha }}"

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Run Performance Tests
      run: |
        cd android
        echo "🚀 Running Android Performance Tests..."
        
        # Run benchmark tests if they exist
        if [ -f "app/src/androidTest/java/com/example/benchmark" ]; then
          ./gradlew connectedBenchmarkAndroidTest
        fi

    - name: Analyze APK Size
      run: |
        cd android
        echo "📦 Analyzing APK size..."
        
        # Get APK size
        APK_SIZE=$(stat -c%s "app/build/outputs/apk/release/app-release.apk" 2>/dev/null || echo "0")
        echo "APK Size: $((APK_SIZE / 1024 / 1024)) MB"
        
        # Check if APK size is within acceptable limits (e.g., < 50MB)
        MAX_SIZE=$((50 * 1024 * 1024))
        if [ "$APK_SIZE" -gt "$MAX_SIZE" ]; then
          echo "❌ APK size exceeds limit: ${APK_SIZE} bytes > ${MAX_SIZE} bytes"
          exit 1
        fi

    - name: Method Count Analysis
      run: |
        cd android
        echo "📊 Analyzing method count..."
        ./gradlew assembleRelease
        
        # Use dexcount gradle plugin if available
        if grep -q "dexcount" app/build.gradle; then
          ./gradlew countReleaseClasses
        fi